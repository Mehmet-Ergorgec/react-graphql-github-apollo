{"version":3,"sources":["Repository/fragments.js","Link/index.js","Button/index.js","Repository/mutations.js","Repository/RepositoryItem/index.js","Loading/index.js","FetchMore/index.js","Issue/IssueList/queries.js","Comment/CommentList/queries.js","Comment/CommentItem/index.js","Comment/CommentAdd/mutations.js","TextArea/index.js","Error/index.js","Comment/CommentAdd/index.js","Comment/CommentList/index.js","Comment/index.js","Issue/IssueItem/index.js","Issue/IssueList/index.js","Issue/index.js","Repository/RepositoryList/index.js","Repository/index.js","Profile/index.js","Organization/index.js","Input/index.js","App/Navigation/index.js","constants/routes.js","App/Footer/index.js","App/index.js","index.js"],"names":["REPOSITORY_FRAGMENT","gql","Link","children","props","target","rel","ButtonUnobtrusive","className","type","Button","color","STAR_REPOSITORY","UNSTAR_REPOSITORY","WATCH_REPOSITORY","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","client","data","updateSubscription","subscribable","id","repository","readFragment","fragment","totalCount","watchers","writeFragment","updateAddStar","addStar","starrable","viewerHasStarred","getUpdatedStarData","updateRemoveStar","removeStar","stargazers","RepositoryItem","name","url","descriptionHTML","primaryLanguage","owner","href","mutation","update","optimisticResponse","__typename","variables","loading","error","data-test-id","onClick","dangerouslySetInnerHTML","__html","login","Loading","state","dots","onTick","setState","prevState","this","interval","setInterval","clearInterval","isCenter","classNames","push","join","Array","fill","map","dot","Component","FetchMore","hasNextPage","updateQuery","fetchMore","GET_ISSUES_OF_REPOSITORY","GET_COMMENTS_OF_ISSUE","Comment","comment","author","bodyHTML","ADD_COMMENT","TextArea","ErrorMessage","toString","CommentAdd","value","onChange","onSubmit","event","addComment","then","preventDefault","issueId","body","subjectId","Error","e","placeholder","previousResult","fetchMoreResult","issue","comments","edges","CommentList","repositoryOwner","repositoryName","number","node","CommentItem","key","pageInfo","cursor","endCursor","Comments","query","notifyOnNetworkStatusChange","withState","isShowComments","onShowComments","title","ISSUE_STATES","TRANSITION_LABELS","TRANSITION_STATE","issues","isShow","issueState","IssueFilter","onChangeIssueState","onMouseOver","nextIssueState","prefetchIssues","IssueList","Issues","useState","setIssueState","filter","length","getUpdateQuery","entry","repositories","RepositoryList","Issue","GET_REPOSITORIES_OF_CURRENT_USER","Profile","viewer","Repository","GET_REPOSITORIES_OF_ORGANIZATION","Organization","organizationName","skip","organization","Input","OrganizationSearch","onOrganizationSearch","React","withRouter","pathname","location","to","Footer","App","exact","path","component","errorLink","onError","graphQLErrors","networkError","message","locations","console","log","retryLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","httpLink","HttpLink","uri","headers","authorization","process","link","ApolloLink","from","cache","InMemoryCache","ApolloClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bdc18af.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst REPOSITORY_FRAGMENT = gql`\r\n  fragment repository on Repository {\r\n    id\r\n    name\r\n    url\r\n    descriptionHTML\r\n    primaryLanguage {\r\n      name\r\n    }\r\n    owner {\r\n      login\r\n      url\r\n    }\r\n    stargazers {\r\n      totalCount\r\n    }\r\n    viewerHasStarred\r\n    watchers {\r\n      totalCount\r\n    }\r\n    viewerSubscription\r\n  }\r\n`;\r\n\r\nexport default REPOSITORY_FRAGMENT;\r\n","import React from 'react';\r\n\r\nconst Link = ({ children, ...props }) => (\r\n  <a {...props} target='_blank' rel='noopener noreferrer'>\r\n    {children}\r\n  </a>\r\n);\r\n\r\nexport default Link;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst Button = ({ children, className, color = 'black', type = 'button', ...props }) => (\r\n  <button className={`${className} Button Button_${color}`} type={type} {...props}>\r\n    {children}\r\n  </button>\r\n);\r\n\r\nconst ButtonUnobtrusive = ({ children, className, type = 'button', ...props }) => (\r\n  <button className={`${className} Button_unobtrusive`} type={type} {...props}>\r\n    {children}\r\n  </button>\r\n);\r\nexport { ButtonUnobtrusive };\r\n\r\nexport default Button;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const STAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    addStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UNSTAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    removeStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const WATCH_REPOSITORY = gql`\r\n  mutation($id: ID!, $viewerSubscription: SubscriptionState!) {\r\n    updateSubscription(input: { state: $viewerSubscription, subscribableId: $id }) {\r\n      subscribable {\r\n        id\r\n        viewerSubscription\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport REPOSITORY_FRAGMENT from '../fragments';\r\nimport Link from '../../Link';\r\nimport Button from '../../Button';\r\n\r\nimport '../style.css';\r\nimport { STAR_REPOSITORY, UNSTAR_REPOSITORY, WATCH_REPOSITORY } from '../mutations';\r\n\r\nconst VIEWER_SUBSCRIPTIONS = {\r\n  SUBSCRIBED: 'SUBSCRIBED',\r\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\r\n};\r\n\r\nconst isWatch = (viewerSubscription) => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\r\n\r\nconst updateWatch = (\r\n  client,\r\n  {\r\n    data: {\r\n      updateSubscription: {\r\n        subscribable: { id, viewerSubscription },\r\n      },\r\n    },\r\n  },\r\n) => {\r\n  const repository = client.readFragment({\r\n    id: `Repository:${id}`,\r\n    fragment: REPOSITORY_FRAGMENT,\r\n  });\r\n\r\n  let { totalCount } = repository.watchers;\r\n  totalCount =\r\n    viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED ? totalCount + 1 : totalCount - 1;\r\n\r\n  client.writeFragment({\r\n    id: `Repository:${id}`,\r\n    fragment: REPOSITORY_FRAGMENT,\r\n    data: {\r\n      ...repository,\r\n      watchers: {\r\n        ...repository.watchers,\r\n        totalCount,\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\n// This function has access to the Apollo Client and the mutation result in its arguments.\r\nconst updateAddStar = (\r\n  client,\r\n  {\r\n    data: {\r\n      addStar: {\r\n        starrable: { id, viewerHasStarred },\r\n      },\r\n    },\r\n  },\r\n) => {\r\n  client.writeFragment({\r\n    id: `Repository:${id}`,\r\n    fragment: REPOSITORY_FRAGMENT,\r\n    data: getUpdatedStarData(client, id, viewerHasStarred),\r\n  });\r\n};\r\n\r\nconst updateRemoveStar = (\r\n  client,\r\n  {\r\n    data: {\r\n      removeStar: {\r\n        starrable: { id, viewerHasStarred },\r\n      },\r\n    },\r\n  },\r\n) => {\r\n  client.writeFragment({\r\n    id: `Repository:${id}`,\r\n    fragment: REPOSITORY_FRAGMENT,\r\n    data: getUpdatedStarData(client, id, viewerHasStarred),\r\n  });\r\n};\r\n\r\nconst getUpdatedStarData = (client, id, viewerHasStarred) => {\r\n  const repository = client.readFragment({\r\n    id: `Repository:${id}`,\r\n    fragment: REPOSITORY_FRAGMENT,\r\n  });\r\n\r\n  let { totalCount } = repository.stargazers;\r\n  totalCount = viewerHasStarred ? totalCount + 1 : totalCount - 1;\r\n\r\n  return {\r\n    ...repository,\r\n    stargazers: {\r\n      ...repository.stargazers,\r\n      totalCount,\r\n    },\r\n  };\r\n};\r\n\r\nconst RepositoryItem = ({\r\n  id,\r\n  name,\r\n  url,\r\n  descriptionHTML,\r\n  primaryLanguage,\r\n  owner,\r\n  stargazers,\r\n  watchers,\r\n  viewerSubscription,\r\n  viewerHasStarred,\r\n}) => (\r\n  <div>\r\n    <div className='RepositoryItem-title'>\r\n      <h2>\r\n        <Link href={url}>{name}</Link>\r\n      </h2>\r\n      <div>\r\n        <Mutation\r\n          mutation={WATCH_REPOSITORY}\r\n          update={updateWatch}\r\n          optimisticResponse={{\r\n            updateSubscription: {\r\n              __typename: 'Mutation',\r\n              subscribable: {\r\n                __typename: 'Repository',\r\n                id,\r\n                viewerSubscription: isWatch(viewerSubscription)\r\n                  ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\r\n                  : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\r\n              },\r\n            },\r\n          }}\r\n          variables={{\r\n            id,\r\n            viewerSubscription: isWatch(viewerSubscription)\r\n              ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\r\n              : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\r\n          }}\r\n        >\r\n          {(updateSubscription, { data, loading, error }) => (\r\n            <Button\r\n              className='RepositoryItem-title-action'\r\n              data-test-id='updateSubscription'\r\n              onClick={updateSubscription}\r\n            >\r\n              {watchers.totalCount} {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\r\n            </Button>\r\n          )}\r\n        </Mutation>\r\n        {!viewerHasStarred ? (\r\n          <Mutation\r\n            mutation={STAR_REPOSITORY}\r\n            update={updateAddStar}\r\n            optimisticResponse={{\r\n              addStar: {\r\n                __typename: 'Mutation',\r\n                starrable: {\r\n                  __typename: 'Repository',\r\n                  id,\r\n                  viewerHasStarred: !viewerHasStarred,\r\n                },\r\n              },\r\n            }}\r\n            variables={{ id }}\r\n          >\r\n            {(addStar, { data, loading, error }) => (\r\n              <Button className={'RepositoryItem-title-action'} onClick={addStar}>\r\n                {stargazers.totalCount} Star\r\n              </Button>\r\n            )}\r\n          </Mutation>\r\n        ) : (\r\n          <Mutation\r\n            mutation={UNSTAR_REPOSITORY}\r\n            update={updateRemoveStar}\r\n            optimisticResponse={{\r\n              removeStar: {\r\n                __typename: 'Mutation',\r\n                starrable: {\r\n                  __typename: 'Repository',\r\n                  id,\r\n                  viewerHasStarred: !viewerHasStarred,\r\n                },\r\n              },\r\n            }}\r\n            variables={{ id }}\r\n          >\r\n            {(removeStar, { data, loading, error }) => (\r\n              <Button className='RepositoryItem-title-action' onClick={removeStar}>\r\n                {stargazers.totalCount} Unstar\r\n              </Button>\r\n            )}\r\n          </Mutation>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n    <div className='RepositoryItem-description'>\r\n      <div\r\n        className='RepositoryItem-description-info'\r\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\r\n      />\r\n      <div className='RepositoryItem-description-details'>\r\n        <div>{primaryLanguage && <span>Language: {primaryLanguage.name}</span>}</div>\r\n        <div>\r\n          {owner && (\r\n            <span>\r\n              Owner: <a href={owner.url}>{owner.login}</a>\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default RepositoryItem;\r\n","import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst TICK_RATE = 500;\r\n\r\nclass Loading extends Component {\r\n  state = {\r\n    dots: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(this.onTick, TICK_RATE);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  onTick = () => {\r\n    this.setState((prevState) => ({ dots: (prevState.dots + 1) % 4 }));\r\n  };\r\n\r\n  render() {\r\n    const { isCenter } = this.props;\r\n    const { dots } = this.state;\r\n\r\n    const classNames = ['Loading'];\r\n\r\n    if (isCenter) {\r\n      classNames.push('Loading_center');\r\n    }\r\n\r\n    return (\r\n      <div className={classNames.join(' ')}>\r\n        <small>Loading {new Array(dots).fill(0).map((dot) => '.')}</small>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport Loading from '../Loading';\r\nimport { ButtonUnobtrusive } from '../Button';\r\n\r\nimport './style.css';\r\n\r\nconst FetchMore = ({ loading, hasNextPage, variables, updateQuery, fetchMore, children }) => (\r\n  <div className='FetchMore'>\r\n    {loading ? (\r\n      <Loading />\r\n    ) : (\r\n      hasNextPage && (\r\n        <ButtonUnobtrusive\r\n          className='FetchMore-button'\r\n          onClick={() => fetchMore({ variables, updateQuery })}\r\n        >\r\n          More {children}\r\n        </ButtonUnobtrusive>\r\n      )\r\n    )}\r\n  </div>\r\n);\r\nexport default FetchMore;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_ISSUES_OF_REPOSITORY = gql`\r\n  query(\r\n    $repositoryOwner: String!\r\n    $repositoryName: String!\r\n    $issueState: IssueState!\r\n    $cursor: String\r\n  ) {\r\n    repository(name: $repositoryName, owner: $repositoryOwner) {\r\n      issues(first: 5, states: [$issueState], after: $cursor) {\r\n        edges {\r\n          node {\r\n            id\r\n            number\r\n            state\r\n            title\r\n            url\r\n            bodyHTML\r\n          }\r\n        }\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_COMMENTS_OF_ISSUE = gql`\r\n  query($repositoryOwner: String!, $repositoryName: String!, $number: Int!, $cursor: String) {\r\n    repository(name: $repositoryName, owner: $repositoryOwner) {\r\n      issue(number: $number) {\r\n        id\r\n        comments(first: 1, after: $cursor) {\r\n          edges {\r\n            node {\r\n              id\r\n              bodyHTML\r\n              author {\r\n                login\r\n              }\r\n            }\r\n          }\r\n          pageInfo {\r\n            endCursor\r\n            hasNextPage\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst Comment = ({ comment }) => (\r\n  <div className='CommentItem'>\r\n    <div>{comment.author.login}:</div>\r\n    &nbsp;\r\n    <div dangerouslySetInnerHTML={{ __html: comment.bodyHTML }} />\r\n  </div>\r\n);\r\n\r\nexport default Comment;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const ADD_COMMENT = gql`\r\n  mutation($subjectId: ID!, $body: String!) {\r\n    addComment(input: { subjectId: $subjectId, body: $body }) {\r\n      commentEdge {\r\n        node {\r\n          body\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst TextArea = ({ children, ...props }) => (\r\n  <textarea className={`TextArea`} {...props}>\r\n    {children}\r\n  </textarea>\r\n);\r\n\r\nexport default TextArea;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst ErrorMessage = ({ error }) => (\r\n  <div className='ErrorMessage'>\r\n    <small>{error.toString()}</small>\r\n  </div>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","import React, { Component } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\n\r\nimport { ADD_COMMENT } from './mutations';\r\n\r\nimport TextArea from '../../TextArea';\r\nimport Button from '../../Button';\r\nimport ErrorMessage from '../../Error';\r\n\r\nclass CommentAdd extends Component {\r\n  state = {\r\n    value: '',\r\n  };\r\n\r\n  onChange = (value) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  onSubmit = (event, addComment) => {\r\n    addComment().then(() => this.setState({ value: '' }));\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const { issueId } = this.props;\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <Mutation mutation={ADD_COMMENT} variables={{ body: value, subjectId: issueId }}>\r\n        {(addComment, { data, loading, error }) => (\r\n          <div>\r\n            {error && <ErrorMessage error={error} />}\r\n\r\n            <form onSubmit={(e) => this.onSubmit(e, addComment)}>\r\n              <TextArea\r\n                value={value}\r\n                onChange={(e) => this.onChange(e.target.value)}\r\n                placeholder='Leave a comment'\r\n              />\r\n              <Button type='submit'>Comment</Button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </Mutation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentAdd;\r\n","import React, { Fragment } from 'react';\r\nimport { Query } from 'react-apollo';\r\n\r\nimport { GET_COMMENTS_OF_ISSUE } from './queries';\r\nimport CommentItem from '../CommentItem';\r\nimport CommentAdd from '../CommentAdd';\r\n\r\nimport Loading from '../../Loading';\r\nimport ErrorMessage from '../../Error';\r\nimport FetchMore from '../../FetchMore';\r\n\r\nimport './style.css';\r\n\r\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\r\n  if (!fetchMoreResult) {\r\n    return previousResult;\r\n  }\r\n\r\n  return {\r\n    ...previousResult,\r\n    repository: {\r\n      ...previousResult.repository,\r\n      issue: {\r\n        ...previousResult.repository.issue,\r\n        ...fetchMoreResult.repository.issue,\r\n        comments: {\r\n          ...previousResult.repository.issue.comments,\r\n          ...fetchMoreResult.repository.issue.comments,\r\n          edges: [\r\n            ...previousResult.repository.issue.comments.edges,\r\n            ...fetchMoreResult.repository.issue.comments.edges,\r\n          ],\r\n        },\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst Comments = ({ repositoryOwner, repositoryName, issue }) => (\r\n  <Query\r\n    query={GET_COMMENTS_OF_ISSUE}\r\n    variables={{\r\n      repositoryOwner,\r\n      repositoryName,\r\n      number: issue.number,\r\n    }}\r\n    notifyOnNetworkStatusChange={true}\r\n  >\r\n    {({ data, loading, error, fetchMore }) => {\r\n      if (error) {\r\n        return <ErrorMessage error={error} />;\r\n      }\r\n\r\n      const { repository } = data ? data : false;\r\n\r\n      if (loading && !repository) {\r\n        return <Loading />;\r\n      }\r\n\r\n      return (\r\n        <Fragment>\r\n          <CommentList\r\n            comments={repository.issue.comments}\r\n            loading={loading}\r\n            number={issue.number}\r\n            repositoryOwner={repositoryOwner}\r\n            repositoryName={repositoryName}\r\n            fetchMore={fetchMore}\r\n          />\r\n\r\n          <CommentAdd issueId={repository.issue.id} />\r\n        </Fragment>\r\n      );\r\n    }}\r\n  </Query>\r\n);\r\n\r\nconst CommentList = ({ comments, loading, repositoryOwner, repositoryName, number, fetchMore }) => (\r\n  <div className='CommentList'>\r\n    {comments.edges.map(({ node }) => (\r\n      <CommentItem key={node.id} comment={node} />\r\n    ))}\r\n\r\n    <FetchMore\r\n      loading={loading}\r\n      hasNextPage={comments.pageInfo.hasNextPage}\r\n      variables={{\r\n        cursor: comments.pageInfo.endCursor,\r\n        repositoryOwner,\r\n        repositoryName,\r\n        number,\r\n      }}\r\n      updateQuery={updateQuery}\r\n      fetchMore={fetchMore}\r\n    >\r\n      Comments\r\n    </FetchMore>\r\n  </div>\r\n);\r\n\r\nexport default Comments;\r\n","import Comments from './CommentList';\r\n\r\nexport default Comments;\r\n","import React from 'react';\r\nimport { withState } from 'recompose';\r\n\r\nimport Button from '../../Button';\r\nimport Comments from '../../Comment';\r\nimport Link from '../../Link';\r\n\r\nimport './style.css';\r\n\r\nconst IssueItem = ({ issue, repositoryOwner, repositoryName, isShowComments, onShowComments }) => (\r\n  <div className='IssueItem'>\r\n    <Button onClick={() => onShowComments(!isShowComments)}>{isShowComments ? '-' : '+'}</Button>\r\n\r\n    <div className='IssueItem-content'>\r\n      <h3>\r\n        <Link href={issue.url}>{issue.title}</Link>\r\n      </h3>\r\n      <div dangerouslySetInnerHTML={{ __html: issue.bodyHTML }} />\r\n\r\n      {isShowComments && (\r\n        <Comments repositoryOwner={repositoryOwner} repositoryName={repositoryName} issue={issue} />\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default withState('isShowComments', 'onShowComments', false)(IssueItem);\r\n","import React, { useState } from 'react';\r\nimport { Query, ApolloConsumer } from 'react-apollo';\r\n\r\nimport { GET_ISSUES_OF_REPOSITORY } from './queries';\r\nimport IssueItem from '../IssueItem';\r\nimport Loading from '../../Loading';\r\nimport ErrorMessage from '../../Error';\r\nimport { ButtonUnobtrusive } from '../../Button';\r\nimport FetchMore from '../../FetchMore';\r\n\r\nimport './style.css';\r\n\r\nconst ISSUE_STATES = {\r\n  NONE: 'NONE',\r\n  OPEN: 'OPEN',\r\n  CLOSED: 'CLOSED',\r\n};\r\n\r\nconst TRANSITION_LABELS = {\r\n  [ISSUE_STATES.NONE]: 'Show Open Issues',\r\n  [ISSUE_STATES.OPEN]: 'Show Closed Issues',\r\n  [ISSUE_STATES.CLOSED]: 'Hide Issues',\r\n};\r\n\r\nconst TRANSITION_STATE = {\r\n  [ISSUE_STATES.NONE]: ISSUE_STATES.OPEN,\r\n  [ISSUE_STATES.OPEN]: ISSUE_STATES.CLOSED,\r\n  [ISSUE_STATES.CLOSED]: ISSUE_STATES.NONE,\r\n};\r\n\r\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\r\n  if (!fetchMoreResult) {\r\n    return previousResult;\r\n  }\r\n\r\n  return {\r\n    ...previousResult,\r\n    repository: {\r\n      ...previousResult.repository,\r\n      issues: {\r\n        ...previousResult.repository.issues,\r\n        ...fetchMoreResult.repository.issues,\r\n        edges: [\r\n          ...previousResult.repository.issues.edges,\r\n          ...fetchMoreResult.repository.issues.edges,\r\n        ],\r\n      },\r\n    },\r\n  };\r\n};\r\nconst isShow = (issueState) => issueState !== ISSUE_STATES.NONE;\r\n\r\nconst prefetchIssues = (client, repositoryOwner, repositoryName, issueState) => {\r\n  const nextIssueState = TRANSITION_STATE[issueState];\r\n  if (isShow(nextIssueState)) {\r\n    client.query({\r\n      query: GET_ISSUES_OF_REPOSITORY,\r\n      variables: {\r\n        repositoryOwner,\r\n        repositoryName,\r\n        issueState: nextIssueState,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nconst Issues = ({ repositoryOwner, repositoryName }) => {\r\n  const [issueState, setIssueState] = useState(ISSUE_STATES.NONE);\r\n\r\n  const onChangeIssueState = (nextIssueState) => {\r\n    setIssueState(nextIssueState);\r\n  };\r\n\r\n  return (\r\n    <div className='Issues'>\r\n      <IssueFilter\r\n        repositoryOwner={repositoryOwner}\r\n        repositoryName={repositoryName}\r\n        issueState={issueState}\r\n        onChangeIssueState={onChangeIssueState}\r\n      />\r\n\r\n      {isShow(issueState) && (\r\n        <Query\r\n          query={GET_ISSUES_OF_REPOSITORY}\r\n          variables={{\r\n            repositoryOwner,\r\n            repositoryName,\r\n            issueState,\r\n          }}\r\n          notifyOnNetworkStatusChange={true}\r\n        >\r\n          {({ data, loading, error, fetchMore }) => {\r\n            if (error) {\r\n              return <ErrorMessage error={error} />;\r\n            }\r\n\r\n            const { repository } = data ? data : false;\r\n\r\n            if (loading && !repository) {\r\n              return <Loading />;\r\n            }\r\n\r\n            const filteredRepository = {\r\n              issues: {\r\n                edges: repository.issues.edges.filter((issue) => issue.node.state === issueState),\r\n              },\r\n            };\r\n\r\n            if (!filteredRepository.issues.edges.length) {\r\n              return <div className='IssueList'>No issues ...</div>;\r\n            }\r\n\r\n            return (\r\n              <IssueList\r\n                issues={repository.issues}\r\n                fetchMore={fetchMore}\r\n                loading={loading}\r\n                repositoryOwner={repositoryOwner}\r\n                repositoryName={repositoryName}\r\n                issueState={issueState}\r\n              />\r\n            );\r\n          }}\r\n        </Query>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst IssueFilter = ({ repositoryOwner, repositoryName, issueState, onChangeIssueState }) => (\r\n  <ApolloConsumer>\r\n    {(client) => (\r\n      <ButtonUnobtrusive\r\n        onClick={() => onChangeIssueState(TRANSITION_STATE[issueState])}\r\n        onMouseOver={() => prefetchIssues(client, repositoryOwner, repositoryName, issueState)}\r\n      >\r\n        {TRANSITION_LABELS[issueState]}\r\n      </ButtonUnobtrusive>\r\n    )}\r\n  </ApolloConsumer>\r\n);\r\n\r\nconst IssueList = ({ issues, loading, repositoryOwner, repositoryName, issueState, fetchMore }) => (\r\n  <div className='IssueList'>\r\n    {issues.edges.map(({ node }) => (\r\n      <IssueItem\r\n        key={node.id}\r\n        issue={node}\r\n        repositoryOwner={repositoryOwner}\r\n        repositoryName={repositoryName}\r\n      />\r\n    ))}\r\n    <FetchMore\r\n      loading={loading}\r\n      hasNextPage={issues.pageInfo.hasNextPage}\r\n      variables={{\r\n        cursor: issues.pageInfo.endCursor,\r\n        repositoryOwner,\r\n        repositoryName,\r\n        issueState,\r\n      }}\r\n      updateQuery={updateQuery}\r\n      fetchMore={fetchMore}\r\n    >\r\n      Issues\r\n    </FetchMore>\r\n  </div>\r\n);\r\n\r\nexport default Issues;\r\n","import Issues from './IssueList';\r\n\r\nexport default Issues;\r\n","import React, { Fragment } from 'react';\r\n\r\nimport RepositoryItem from '../RepositoryItem';\r\nimport FetchMore from '../../FetchMore';\r\nimport Issues from '../../Issue';\r\n\r\nimport '../style.css';\r\n\r\nconst getUpdateQuery = (entry) => (previousResult, { fetchMoreResult }) => {\r\n  if (!fetchMoreResult) {\r\n    return previousResult;\r\n  }\r\n  return {\r\n    ...previousResult,\r\n    [entry]: {\r\n      ...previousResult[entry],\r\n      repositories: {\r\n        ...previousResult[entry].repositories,\r\n        ...fetchMoreResult[entry].repositories,\r\n        edges: [\r\n          ...previousResult[entry].repositories.edges,\r\n          ...fetchMoreResult[entry].repositories.edges,\r\n        ],\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst RepositoryList = ({ repositories, fetchMore, loading, entry }) => (\r\n  <Fragment>\r\n    {repositories.edges.map(({ node }) => (\r\n      <div key={node.id} className='RepositoryItem'>\r\n        <RepositoryItem {...node} />\r\n        <Issues repositoryName={node.name} repositoryOwner={node.owner.login} />\r\n      </div>\r\n    ))}\r\n    <FetchMore\r\n      loading={loading}\r\n      hasNextPage={repositories.pageInfo.hasNextPage}\r\n      variables={{\r\n        cursor: repositories.pageInfo.endCursor,\r\n      }}\r\n      updateQuery={getUpdateQuery(entry)}\r\n      fetchMore={fetchMore}\r\n    >\r\n      Repositories\r\n    </FetchMore>\r\n  </Fragment>\r\n);\r\n\r\nexport default RepositoryList;\r\n","import RepositoryList from './RepositoryList';\r\nimport REPOSITORY_FRAGMENT from './fragments';\r\n\r\nexport { REPOSITORY_FRAGMENT };\r\nexport default RepositoryList;\r\n","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\r\nimport Loading from '../Loading';\r\nimport ErrorMessage from '../Error';\r\n\r\nimport './style.css';\r\n\r\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\r\n  query($cursor: String) {\r\n    viewer {\r\n      repositories(first: 5, orderBy: { direction: DESC, field: STARGAZERS }, after: $cursor) {\r\n        edges {\r\n          node {\r\n            ...repository\r\n          }\r\n        }\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${REPOSITORY_FRAGMENT}\r\n`;\r\n\r\nconst Profile = () => (\r\n  <Query query={GET_REPOSITORIES_OF_CURRENT_USER} notifyOnNetworkStatusChange={true}>\r\n    {({ data, loading, error, fetchMore }) => {\r\n      const { viewer } = data ? data : false; // First data is undefined(default).It is necessary\r\n      // console.log(viewer);\r\n      if (error) {\r\n        return <ErrorMessage error={error} />;\r\n      }\r\n\r\n      if (loading && !viewer) {\r\n        return <Loading />;\r\n      }\r\n\r\n      return (\r\n        <RepositoryList\r\n          loading={loading}\r\n          repositories={viewer.repositories}\r\n          fetchMore={fetchMore}\r\n          entry={'viewer'} // top level object see in Organization\r\n        />\r\n      );\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\r\nimport Loading from '../Loading';\r\nimport ErrorMessage from '../Error';\r\n\r\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\r\n  query($organizationName: String!, $cursor: String) {\r\n    organization(login: $organizationName) {\r\n      repositories(first: 5, after: $cursor) {\r\n        edges {\r\n          node {\r\n            ...repository\r\n          }\r\n        }\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${REPOSITORY_FRAGMENT}\r\n`;\r\n\r\nconst Organization = ({ organizationName }) => (\r\n  <Query\r\n    query={GET_REPOSITORIES_OF_ORGANIZATION}\r\n    variables={{\r\n      organizationName,\r\n    }}\r\n    skip={organizationName === ''}\r\n    notifyOnNetworkStatusChange={true}\r\n  >\r\n    {({ data, loading, error, fetchMore }) => {\r\n      if (error) {\r\n        return <ErrorMessage error={error} />;\r\n      }\r\n\r\n      const { organization } = data ? data : false;\r\n\r\n      if (loading && !organization) {\r\n        return <Loading />;\r\n      }\r\n\r\n      return (\r\n        <RepositoryList\r\n          loading={loading}\r\n          repositories={organization.repositories}\r\n          fetchMore={fetchMore}\r\n          entry={'organization'} // top level object see in Profile\r\n        />\r\n      );\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default Organization;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst Input = ({ children, color = 'black', ...props }) => (\r\n  <input className={`Input Input_${color}`} {...props}>\r\n    {children}\r\n  </input>\r\n);\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nimport * as routes from '../../constants/routes';\r\nimport Button from '../../Button';\r\nimport Input from '../../Input';\r\n\r\nimport './style.css';\r\n\r\nconst Navigation = ({ location: { pathname }, organizationName, onOrganizationSearch }) => (\r\n  <header className='Navigation'>\r\n    <div className='Navigation-link'>\r\n      <Link to={routes.PROFILE}>Profile</Link>\r\n    </div>\r\n    <div className='Navigation-link'>\r\n      <Link to={routes.ORGANIZATION}>Organization</Link>\r\n    </div>\r\n\r\n    {pathname === routes.ORGANIZATION && (\r\n      <OrganizationSearch\r\n        organizationName={organizationName}\r\n        onOrganizationSearch={onOrganizationSearch}\r\n      />\r\n    )}\r\n  </header>\r\n);\r\n\r\nclass OrganizationSearch extends React.Component {\r\n  state = {\r\n    value: this.props.organizationName,\r\n  };\r\n\r\n  onChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  onSubmit = (event) => {\r\n    this.props.onOrganizationSearch(this.state.value);\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <div className='Navigation-search'>\r\n        <form onSubmit={this.onSubmit}>\r\n          <Input color={'white'} type='text' value={value} onChange={this.onChange} />{' '}\r\n          <Button color={'white'} type='submit'>\r\n            Search\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navigation);\r\n","export const ORGANIZATION = '/';\r\nexport const PROFILE = '/profile';\r\n","import React from 'react';\r\n\r\nimport Link from '../../Link';\r\n\r\nimport './style.css';\r\n\r\nconst Footer = () => (\r\n  <div className='Footer'>\r\n    <div>\r\n      <small>\r\n        <span className='Footer-text'>Built by</span>{' '}\r\n        <Link className='Footer-link' href='https://github.com/Mehmet-Ergorgec'>\r\n          Me\r\n        </Link>{' '}\r\n        <span className='Footer-text'>with &hearts;</span>\r\n      </small>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport Profile from '../Profile';\r\nimport Organization from '../Organization';\r\nimport Navigation from './Navigation/index';\r\nimport Footer from './Footer';\r\n\r\nimport './style.css';\r\n\r\nimport * as routes from '../constants/routes';\r\nclass App extends Component {\r\n  state = {\r\n    organizationName: 'hackyourfuture',\r\n  };\r\n\r\n  onOrganizationSearch = (value) => {\r\n    this.setState({ organizationName: value });\r\n  };\r\n  render() {\r\n    const { organizationName } = this.state;\r\n    return (\r\n      <Router>\r\n        <div className='App'>\r\n          <Navigation\r\n            organizationName={organizationName}\r\n            onOrganizationSearch={this.onOrganizationSearch}\r\n          />\r\n          <div className='App-main'>\r\n            <Route\r\n              exact\r\n              path={routes.ORGANIZATION}\r\n              component={() => (\r\n                <div className='App-content_large-header'>\r\n                  <Organization organizationName={organizationName} />\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path={routes.PROFILE}\r\n              component={() => (\r\n                <div className='App-content_small-header'>\r\n                  <Profile />\r\n                </div>\r\n              )}\r\n            />\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { RetryLink } from 'apollo-link-retry';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport './style.css';\nimport App from './App';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`),\n    );\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst retryLink = new RetryLink({\n  delay: {\n    initial: 300,\n    max: Infinity,\n    jitter: true,\n  },\n  attempts: {\n    max: 5,\n    retryIf: (error, _operation) => !!error,\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n\nconst link = ApolloLink.from([errorLink, retryLink, httpLink]);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}